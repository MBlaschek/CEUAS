#!/usr/bin/env python
import os
import sys


def color_boolean(x):
    """
    Colorize a bool
    Parameters
    ----------
    x   bool    True: Green, False: Red


    Returns
    -------
    str     Colored True or False
    """
    if x:
        return "\033[92m %r \033[0m" % x
    else:
        return "\033[91m %r \033[0m" % x


# todo add groups


def header(f):
    print("Dimensions: ")
    for idim in f.dimensions:
        print("       %-15s : %-8d %s" % (
            idim, f.dimensions[idim].size, '[unlimited]' if f.dimensions[idim].isunlimited() else ''))

    print("Variables: ")

    for ivar in f.variables:
        if ivar in f.dimensions:
            continue
        print("       %-25s : %-20s %-15s [%s]" % (
            ivar, ",".join(f.variables[ivar].dimensions), str(f.variables[ivar].shape),
            str(getattr(f.variables[ivar], 'units', '1'))))

    print("Attributes: ")

    for iatt in f.ncattrs():
        print("       %-15s : %s" % (iatt, f.getncattr(iatt)))


def detailed_information(f, ivar, data=False):
    if ivar in f.variables:
        print(" %-25s : %-20s %-15s [%s]" % (ivar, ",".join(f.variables[ivar].dimensions), str(f.variables[ivar].shape),
                                             str(getattr(f.variables[ivar], 'units', '1'))))
        for iatt in f.variables[ivar].ncattrs():
            print("      %-20s : %s" % (iatt, f.variables[ivar].getncattr(iatt)))  # getattr(f.variables[ivar], iatt))

        if data:
            if 'units' in f.variables[ivar].ncattrs():
                units = f.variables[ivar].getncattr('units')
                if 'since' in units:
                    calendar = f.variables[ivar].getncattr('calendar') if 'calendar' in f.variables[
                        ivar].ncattrs() else None
                    print(" %-10s : " % "Values", nc.num2date(f.variables[ivar][::], units, calendar))
            print(" %-10s : " % "Values", f.variables[ivar][::])
        else:
            print(" %-10s : " % "Values", f.variables[ivar].shape)


def diff(ifile, jfile):
    if not os.path.isfile(ifile):
        raise IOError()
    if not os.path.isfile(jfile):
        raise IOError()

    with nc.Dataset(ifile) as f:
        with nc.Dataset(jfile) as g:
            # Dimensions
            for ivar in f.variables:
                if ivar in f.dimensions:
                    if ivar in g.dimensions:
                        print("       %-15s : %-8d <> %-8d  %s Size: [%s]" % (ivar,
                                                                              f.dimensions[ivar].size,
                                                                              g.dimensions[ivar].size,
                                                                              '[unlimited]' if
                                                                              f.dimensions[
                                                                                  ivar].isunlimited() else '',
                                                                              color_boolean(
                                                                                  f.dimensions[
                                                                                      ivar].size ==
                                                                                  g.dimensions[
                                                                                      ivar].size)))
                        in_f = np.in1d(f.variables[ivar][:], g.variables[ivar][:])
                        in_g = np.in1d(g.variables[ivar][:], f.variables[ivar][:])
                        if in_f.size > 0:
                            print("1       %-15s :" % ivar, " not in 2:", f.variables[ivar][~in_f])
                        if in_g.size > 0:
                            print("2       %-15s :" % ivar, " not in 1:", g.variables[ivar][~in_g])
                    else:
                        print("       %-15s : %-8d only in 1 %s" % (ivar,
                                                                    f.dimensions[ivar].size,
                                                                    '[unlimited]' if f.dimensions[
                                                                        ivar].isunlimited() else ''))
            allvars = []

            for ivar in f.variables:
                if ivar in f.dimensions:
                    continue
                allvars += [ivar]
                if ivar in g.variables:
                    print("1      %-25s : %-20s %-15s [%s]" % (
                        ivar, ",".join(f.variables[ivar].dimensions), str(f.variables[ivar].shape),
                        str(getattr(f.variables[ivar], 'units', '1'))))
                    print("2      %-25s : %-20s %-15s [%s]" % (
                        ivar, ",".join(g.variables[ivar].dimensions), str(g.variables[ivar].shape),
                        str(getattr(g.variables[ivar], 'units', '1'))))
                    if f.variables[ivar].shape == g.variables[ivar].shape:
                        print("<>     %-25s : Shape: %s, Values: %s" % (
                            ivar, color_boolean(True),
                            color_boolean((f.variables[ivar][:] == g.variables[ivar][:]).all())))

                    else:
                        print("<>     %-25s : Shape: %s" % (ivar, color_boolean(False)))
            print("1 : ", allvars)
            allvars = []
            for ivar in g.variables:
                if ivar in g.dimensions:
                    continue
                allvars += [ivar]
            print("2 : ", allvars)


usage = """
 Print summary information about a netCDF file.

 usage: %s -v [var] -d [dim] -a [filename]

 -v  --variable     Print info for this variable.
 -d  --dimension    Print info for this dimension.
 -a  --array        Print array data
 --diff [filename]  Print differences

 netcdf filename must be last argument.
\n""" % os.path.basename(sys.argv[0])

if __name__ == '__main__':
    import getopt
    import numpy as np
    import netCDF4 as nc

    try:
        opts, pargs = getopt.getopt(sys.argv[1:], 'v:d:a', ['variable=', 'dimension=', 'array', 'diff='])
    except:
        (type, value, traceback) = sys.exc_info()
        sys.stdout.write("Error parsing the options. The error was: %s\n" % value)
        sys.stderr.write(usage)
        sys.exit(0)

    # Get the options
    var = None
    dim = None
    data = False
    dodiff = False
    for iopt, iarg in opts:
        if iopt in ('--variable', '-v'):
            var = iarg
        elif iopt in ('-a', '--array'):
            data = True
        elif iopt in ('--dimension', '-d'):
            dim = iarg
        elif iopt in ('--diff'):
            jfile = iarg
            dodiff = True
        else:
            sys.stdout.write("%s: Unrecognized option\n" % iopt)
            sys.stderr.write(usage)
            sys.exit(0)

    # filename passed as last argument
    if len(pargs) == 0:
        sys.stderr.write(usage)
        sys.exit(0)

    filename = pargs[-1]

    if dodiff:
        diff(filename, jfile)
    else:

        if not os.path.isfile(filename):
            raise IOError("Unknonw file: %s" % filename)

        f = nc.Dataset(filename, 'r')

        try:
            # HEADER INFORMATION
            print("File: %s" % filename)
            header(f)
            # other variables ?
            if var is not None:
                print("Variable: ")
                detailed_information(f, var, data=data)

            if dim is not None:
                print("Dimension: ")
                detailed_information(f, dim, data=data)

            print("")

        finally:
            f.close()
